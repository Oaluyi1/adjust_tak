name: Hello-App CICD

on:
  push:
    branches:
      - feature/adjust_tak

jobs:
  lint-code:
    runs-on: ubuntu-latest
  
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v3
  
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: 3.8
    
      - name: Install Dependencies
        run: |
          pip install --no-cache-dir -r requirements.txt
          pip install --upgrade pip
          pip install flake8
          pip install black
          sudo apt-get install git
      
      - name: Debug installed packages
        run: |
          pip list
        

      - name: Lint Code
        run: |
          flake8 .
          black --check . || true
    
      - name: Display Linting Results
        run: flake8 . --show-source --statistics

  test:
    runs-on: ubuntu-latest
    needs: lint-code
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v2

      - name: Set up Python
        uses: actions/setup-python@v2
        with:
          python-version: 3.8

      - name: Install Dependencies
        run: |
          pip install -r requirements.txt
          pip install --upgrade pip

      - name: Run Tests
        run: python -m unittest testing/test_app.py

  analyse-Dockerfile:
    runs-on: ubuntu-latest
    needs: [lint-code,test]

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v2

      - name: Install Hadolint
        run: |
          sudo wget -O /bin/hadolint https://github.com/hadolint/hadolint/releases/latest/download/hadolint-Linux-x86_64
          sudo chmod +x /bin/hadolint

      # - name: Run Hadolint
      #   run: hadolint --ignore DL3008, DL3015 Dockerfile

  build-Docker-image:
    runs-on: ubuntu-latest
    needs: analyse-Dockerfile
    
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
  
      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.USERNAME }}
          password: ${{ secrets.PASSWORD }}
      
      - name: Configure AWS Credentials Action For GitHub Actions
        uses: aws-actions/configure-aws-credentials@v1-node16
        with:
          role-to-assume: ${{ secrets.IAM_ROLE }}
          role-session-name: AWSSession
          aws-region: eu-west-2

      - name: Build Docker Image
        uses: docker/build-push-action@v5.1.0
        with:
          context: .
          file: ./Dockerfile
          push: true
          labels: |
            org.opencontainers.image.title=my-app
            org.opencontainers.image.description=Docker image for the app
          tags: 2470/home_task:latest
        id: docker_build    
      
      - name: Run Security Scan
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: 2470/home_task:latest
          format: 'table'
          exit-code: '0'

  eks-deploy:
    runs-on: ubuntu-latest
    needs: build-Docker-image

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v3

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_USERNAME }}
          aws-secret-access-key: ${{ secrets.AWS_PASSWORD }}
          aws-region: ${{ secrets.REGION }}

      - name: Download ALB Ingress Controller
        run: |
          helm repo add alb-ingress https://kubernetes-sigs.github.io/aws-alb-ingress-controller && helm install alb-ingress/alb-ingress-controller \
          --set autoDiscoverAwsRegion=true \
          --set autoDiscoverAwsVpcID=true \
          --set clusterName=adjust-app-ctr
      
      - name: verify ingress controller is running
        run: |
          kubectl get pods -l "app.kubernetes.io/name=aws-load-balancer-controller"

      - name: Deploy to EKS Cluster
        run: | 
          aws eks --region eu-west-2 update-kubeconfig --name adjust-app-ctr
          kubectl get namespaces

          # Check if namespace exists before deleting
          if kubectl get namespace hello-python-app; then
          kubectl delete namespace hello-python-app
          fi
          helm list -n hello-python-app

            # Create the namespace
          kubectl create namespace hello-python-app
          
          sleep 70s
          # Deploy or upgrade with Helm
          helm install --debug my-release helm-charts -f helm-charts/values.yaml --namespace hello-python-app
          
          # Wait for the pod to be ready
          set -e
          seconds=0
          max_seconds=600  # Adjust the maximum waiting time as needed

          while [ "$seconds" -lt "$max_seconds" ]; do
            pod_status=$(kubectl get pods -n my-app -o jsonpath='{.status.phase}')
            if [ "$pod_status" == "Failed" ] || [ "$pod_status" == "Pending" ]; then
              echo "Waiting for the pod to be ready. Elapsed time: $seconds seconds. Current status: $pod_status"
              echo "Pod failed to start or is still pending. Exiting..."
              exit 1
            elif [ "$pod_status" == "Running" ]; then
              echo "Pod is running!"
              exit 0
            else
              echo "Waiting for the pod to be ready. Elapsed time: $seconds seconds."
              sleep 10
              seconds=$((seconds+10))
            fi
          done

          echo "Timeout: Pod did not become ready within the allotted time."
          exit 1

      
      - name: Try the cluster !
        run: |
          kubectl get pods -n hello-python-app
          kubectl describe pods -n hello-python-app
          kubectl get deployments -n hello-python-app
          kubectl get services -n hello-python-app
      
      # - name: Port-Forward Service
      #   run: |
      #     kubectl port-forward service/my-release-deployment 8080:5000 -n my-app &
      #     sleep 10  # Sleep for some time to allow port-forward to establish
    
      # - name: Test App with cURL
      #   run: |
      #     set -e  # Exit on any error  
      #     # Retry up to 3 times with a 5-second delay
      #     for i in {1..3}; do
      #       curl -f http://localhost:8080/hello || true  # Silence curl output
      #       if [ $? -eq 0 ]; then
      #         echo "App is accessible!"
      #         exit 0
      #       fi
      #       sleep 5
      #     done
  
      #     # App not accessible after retries
      #     echo "App is not accessible after retries"
      #     exit 2  # Specific exit code for test failure
