name: CICD Deployment

on:
  push:
    branches:
      - feature/adjust_tak

jobs:
  lint-code:
    runs-on: ubuntu-latest
    
    env:
      DOCKER_IMAGE: 2470/home_task:latest

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v3

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: 3.8

      - name: Install Dependencies
        run: |
          pip install --no-cache-dir -r requirements.txt
          pip install --upgrade pip
          pip install flake8
          pip install black

      - name: Debug installed packages
        run: |
          pip list

      - name: Lint Code
        run: |
          flake8 .
          black --check . || true

      - name: Display Linting Results
        run: flake8 . --show-source --statistics

  test:
    runs-on: ubuntu-latest
    needs: lint-code

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v2

      - name: Set up Python
        uses: actions/setup-python@v2
        with:
          python-version: 3.8

      - name: Install Dependencies
        run: |
          pip install -r requirements.txt
          pip install --upgrade pip

      - name: Run Tests
        run: python -m unittest testing/test_app.py

  analyse-Dockerfile:
    runs-on: ubuntu-latest
    needs: [lint-code, test]

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v2

      - name: Install Hadolint
        run: |
          sudo wget -O /bin/hadolint https://github.com/hadolint/hadolint/releases/latest/download/hadolint-Linux-x86_64
          sudo chmod +x /bin/hadolint

      - name: Run Hadolint
        run: hadolint Dockerfile

  build-Docker-image:
    runs-on: ubuntu-latest
    needs: analyse-Dockerfile

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.USERNAME }}
          password: ${{ secrets.PASSWORD }}

      - name: Build Docker Image
        uses: docker/build-push-action@v5.1.0
        with:
          context: .
          file: ./Dockerfile
          push: true
          labels: |
            org.opencontainers.image.title=my-app
            org.opencontainers.image.description=Docker image for the app
          tags: 2470/home_task:latest
        id: docker_build

      - name: Run Security Scan
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: 2470/home_task:latest
          format: 'table'
          exit-code: '0'

  setup-kind:
    runs-on: ubuntu-latest
    needs: [build-Docker-image]

    steps:
      - name: Install kind
        run: |
          curl -Lo kind https://kind.sigs.k8s.io/dl/v0.12.0/kind-linux-amd64
          chmod +x kind
          sudo mv kind /usr/local/bin/

  deploy-kind-cluster:
    runs-on: ubuntu-latest
    needs: setup-kind

    steps:
      - name: Create kind cluster
        run: kind create cluster
      
      - name: Pull Docker Image
        run: docker pull 2470/home_task:latest

      - name: Load Docker image into kind cluster
        run: kind load docker-image 2470/home_task:latest --name kind

      - name: Set kubeconfig context
        run: kind get kubeconfig --name kind --internal > $HOME/.kube/config

      - name: Deploy with Helm to kind cluster
        run: |
          # kubectl create namespace my-app
          helm upgrade --install --debug my-release helm-charts --namespace my-app
          kubectl get events --sort-by=.metadata.creationTimestamp

      - name: Try the cluster!
        run: |
          kubectl get pods -n my-app
          kubectl describe pod -n my-app
          kubectl get deployments -n my-app
          kubectl get services -n my-app

      - name: Port-Forward Service
        run: |
          kubectl port-forward service/my-release-deployment 8080:5000 -n my-app &
          sleep 10  # Sleep for some time to allow port-forward to establish

      - name: Test App with cURL
        run: |
          set -e  # Exit on any error
          # Retry up to 3 times with a 5-second delay
          for i in {1..3}; do
            curl -f http://localhost:8080/hello || true  # Silence curl output
            if [ $? -eq 0 ]; then
              echo "App is accessible!"
              exit 0
            fi
            sleep 5
          done

          # App not accessible after retries
          echo "App is not accessible after retries"
          exit 2  # Specific exit code for test failure
